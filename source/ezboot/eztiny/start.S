/*======================================================================================

  화일명 : start.S
  설  명 : 리셋시 호출되는 루틴
  
  작성자 : (주)제이닷디앤티  푸지
  작성일 : 2003년 4월 21일
  
  비  고 :  

========================================================================================*/

#include 	<ez_x5.h>

.text

//-----------------------------------------------------------------------------------------		
//
//  인터럽트  벡터 테이블 
//
//-----------------------------------------------------------------------------------------		
.globl 		_start

_start:		b	reset			// MCU가 리셋된후 실행된다. 
		b	undefined_instruction	// 정의되지 않는 명령이 명령 인스트럭터에 패치되었을때 실행된다. 
		b	software_interrupt      // 소프트웨어적인 인터럽트 명령(SWI)가 수행되었을 때 실행된다. 
		b	prefetch_abort		// 데이타를 프리 패치 할때 버스 에러가 발생하면 실행된다.
		b	data_abort		// 데이타 에러가 발생하면 실행된다.
		b	not_used		// 사용되지 않는다.
		b	IRQ			// IRQ 인터럽트가 발생되면 실행된다.
		b	FIQ			// IRQ 인터럽트보다 우선권이 있는 인터럽트가 발생되면 실행된다.


//-----------------------------------------------------------------------------------------		
//
//  캐쉬에 관련된 코프로세스 명령을 적용할때의 지연
//
//-----------------------------------------------------------------------------------------		
.macro		CPWAIT
		mrc	p15, 0, r0, c2, c0, 0
		mov	r0, r0
		sub	pc, pc, #4
.endm

//-----------------------------------------------------------------------------------------		
//
//  RESET이 발생하거나 전원이 들어 왔을때 맨 처음 수행되는 루틴이다.
//
//-----------------------------------------------------------------------------------------		
reset:		
		//-------------------------------------------
		// change Supervisor mode & IRQ/FIQ Disable
		//-------------------------------------------

      		mrs     r0, CPSR               
        	bic     r0, r0, #0x1f
        	orr     r0, r0, #(0x13 | 0xc0)
        	msr     CPSR, r0

		//-------------------------------------------
		// Change CPU SPEED
		//-------------------------------------------
		
		// CCCR 레지스터를 설정하여 CPU 속도를 맞춘다.
		ldr	r0, =PXA_REG_CCCR
		ldr	r1, =CPU_SPEED
		str	r1, [r0]

		// 동작속도를 변경한다.
		mov	r0, #PXA_COP_CCLKCFG_FCS
		mcr	p14, 0, r0, c6, c0, 0

		// 터보모드가 있는지 확인한다.
		and 	r1, r1, #(0x7 << 7)	// CCCR_BF_N Mask
		cmp	r1, #CCCR_BF_N_RUN_X10
		beq	10f

		// 터보모드를 활성화 한다.
		mov	r0, #PXA_COP_CCLKCFG_TURBO
		mcr	p14, 0, r0, c6, c0, 0
10:
		//-------------------------------------------
		// Active I-Chache
		//-------------------------------------------
	
		// I-Cache 비활성화 
		mcr	p15, 0, r1, c7, c5, 0
		CPWAIT

		// I-Cache 활성화 
		mrc	p15, 0, r0, c1, c0, 0
		orr	r0, r0, #0x1000
		mcr	p15, 0, r0, c1, c0, 0
		CPWAIT
	
				mov	r5, #DEBUG_START
				bl	led_out

		//-------------------------------------------
		//  GPIO 설정 
		//-------------------------------------------
	        
		bl	gpio_init

		//-------------------------------------------
		//  SDRAM, Static MEM 설정
		//-------------------------------------------

		bl	mem_config		

				mov	r5, #DEBUG_READY_MEMTEST
				bl	led_out

		//-------------------------------------------
		//  Memory Test
		//-------------------------------------------

		bl	mem_test

				mov	r5, #DEBUG_MEM_OK
				bl	led_out

		//-------------------------------------------
		//  부트영역 클리어
		//-------------------------------------------
		
		bl	mem_clear


		//-------------------------------------------
		//  시리얼 초기화, Download to SDRAM ========
		//-------------------------------------------
		
		bl	serial_init
		bl	tiny_download


		//-------------------------------------------
		//  STACK 포인터를 설정한다.
		//-------------------------------------------

		ldr	r0, =EZ_X5_RAM_BOOT_END
		sub	sp, r0, #0x04

				mov	r5, #DEBUG_JUMP_C
				bl	led_out

		//-------------------------------------------
		//  eztiny 임을 메모리에 표시한다.
		//-------------------------------------------

		mov	r1, #0xA0000000
		mov	r2, #0x0001
		str	r2, [r1]

		//-------------------------------------------
		//  main.c 로 이동한다.
		//-------------------------------------------

		ldr	r0, =EZ_X5_RAM_BOOT
		add	r0, r0, #EZ_X5_C_MAIN_OFFSET

		mov	pc, r0

		// 이곳으로는 진행되지 않는다.
		b	error_loop

//-----------------------------------------------------------------------------------------		
//
//  Reset 이외의 인터럽트 처리 
//-----------------------------------------------------------------------------------------		

data_abort:		
		mov	r5, #DEBUG_DATA_ABORT
		bl	led_out
		b	error_loop

undefined_instruction:
software_interrupt:
prefetch_abort:		
not_used:		
IRQ:			
FIQ:			
		mov	r5, #DEBUG_OTHER_EXCEPT
		bl	led_out
		b	error_loop
